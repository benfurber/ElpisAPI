scalar DateTime
scalar URL

type Query {
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  comment(id: ID!): Comment
  reply(id: ID!): Reply
  me: User
}

type Mutation {
  ageNotification(id: String!): Notification!
  completeUserOnboarding: User!
  createComment(content: String!, id: ID!): Comment!
  createDraft(title: String, content: String!, imagePath: URL): Post!
  createNotification(
    postId: String!
    replyId: String
    userId: String!
  ): Notification!
  createNotifications(postId: String!, commentId: String): [Notification]!
  createReply(content: String!, id: ID!): Reply!
  deleteComment(id: ID!): Comment!
  deletePost(id: ID!): Post!
  deleteReply(id: ID!): Reply!
  linkUserProfilePicture(avatarPath: URL!): User!
  login(email: String!, password: String!): AuthPayload!
  publish(id: ID!): Post!
  signup(email: String!, password: String!, name: String!): AuthPayload!
  updatePassword(password: String!): User!
}

type Subscription {
  feedSubscription: Post
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  avatarPath: URL
  posts: [Post!]!
  onboarded: Boolean!
  unreadNotifications: Int!
  notifications: [Notification]!
}

type Post {
  id: ID!
  author: User!
  createdAt: DateTime!
  title: String!
  content: String!
  comments: [Comment!]!
  published: Boolean!
  imagePath: URL
}

type Comment {
  id: ID!
  author: User!
  createdAt: DateTime!
  content: String!
  post: Post!
  replies: [Reply!]!
  totalReplies: Int
}

type Reply {
  id: ID!
  author: User!
  createdAt: DateTime!
  content: String!
  comment: Comment!
}

type NotificationContent {
  post: Post!
  reply: Reply
  type: String!
}

type Notification {
  id: ID!
  author: User!
  createdAt: DateTime!
  content: NotificationContent!
  newNotification: Boolean!
}
